// DESAFIO 1
function procesarUsuarios(usuarios) {
  /*
  ğŸ§  La funciÃ³n recibe un argumento que es un array de usuarios.
  ğŸ§  Cada usuario del array es un objeto de la forma siguiente:
        { id: 7, activo: true, nombre: "Juan", apellido: "Lopez", padre: "Jo-Con-Ã‰l", madre: "Martha" }
  ğŸ§  La funciÃ³n retorna un nuevo array de objetos, incluyendo solo a los usuarios activos.
  ğŸ§  Cada usuario del array retornado tiene la forma siguiente:
        { id: 7, nombreCompleto: "Juan LÃ³pez", progenitores: ["Martha", "Jo-Con-Ã‰l"] }
  ğŸ§  Ten en cuenta los siguiente:
        * Los usuarios retornados aparecen en el mismo orden que en el array original.
        * Los usuarios retornados carecen de propiedad `activo`, se asume que son activos.
        * Los progenitores aparecen en el orden siguiente: primero madre, despuÃ©s padre.
  */

}

// DESAFIO 2
class PistolaDeJuguete {
  /*
  ğŸ§  El constructor recibe un solo argumento: el nÃºmero mÃ¡ximo de proyectiles que acepta una pistola.
  ğŸ§  Las instancias creadas con esta clase se inician completamente cargadas y con el seguro puesto.
  ğŸ§  Las instancias tienen un mÃ©todo `seguro` que no recibe argumentos y cambia el estado del seguro.
       * Al activar el seguro, el mÃ©todo retorna "Â¡Seguro puesto!"
       * Al desactivar el seguro, retorna "Â¡Seguro quitado!"
  ğŸ§  Las instancias tienen un mÃ©todo `disparar` que no recibe argumentos:
       * Si queda municiÃ³n y el seguro estÃ¡ desactivado, el mÃ©todo gasta un proyectil y retorna "Â¡Bang!"
       * Si se dispara sin municiÃ³n o con el seguro puesto, retorna la cadena "Â¡Clic!"
  ğŸ§  Las instancias tienen un mÃ©todo `recargar` que recibe un nÃºmero y recarga la instancia con ese nÃºmero de proyectiles.
       * Recargar devuelve una cadena en el siguiente formato: "Â¡Dispones de <nÃºmero> proyectiles!"
       * Si el nÃºmero recibido como argumento excede la capacidad mÃ¡xima, solo se recarga hasta la capacidad mÃ¡xima.
       * Si el mÃ©todo recibe un argumento que no sea un tipo nÃºmero mayor que cero, devuelve la cadena "Â¡Error al recargar!"
  ğŸŒŸ PISTA: las instancias necesitan llevar un registro de su capacidad mÃ¡xima asÃ­ como de su capacidad actual.
  */

}
